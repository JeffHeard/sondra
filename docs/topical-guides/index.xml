<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Topical-guides-rsses on Sondra Documentation</title>
    <link>https://jeffersonheard.github.io/sondra/topical-guides/index.xml</link>
    <description>Recent content in Topical-guides-rsses on Sondra Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Wed, 12 Oct 2016 16:38:34 -0400</lastBuildDate>
    <atom:link href="https://jeffersonheard.github.io/sondra/topical-guides/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Your Flask app</title>
      <link>https://jeffersonheard.github.io/sondra/topical-guides/flask/</link>
      <pubDate>Wed, 12 Oct 2016 16:38:34 -0400</pubDate>
      
      <guid>https://jeffersonheard.github.io/sondra/topical-guides/flask/</guid>
      <description>&lt;p&gt;The following boilerplate, based on the Todo app in the tutorials, will give you what you need to
create a basic Flask application to serve your API. Typically, this would be served via uWSGI and a
webserver to serve static and uploaded content. Since Sondra is only an API server and ORM, these
topics are not covered as part of the guide.&lt;/p&gt;

&lt;p&gt;This boilerplate includes compression. Most suites will also require the CORS middleware, which
can be configured in the suite, and is applied by default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sondra.auth import Auth  # this is a sample Auth application. You may want to use another service for auth.
from sondra.flask import api_tree, init  
from todo import TodoApp, TodoSuite
from flask.ext.compress import Compress

app = Flask(__name__)
Compress(app)  # I can&#39;t think of a reason you wouldn&#39;t want to do this, especially for large payloads.

# passing a parameter into the Suite will cause all databases to be prefixed with that string.
# This can be useful for creating multiple test platforms using the same database server and
# codebase without configuration changes.
if len(sys.argv) &amp;gt; 1:
    app.suite = TodoSuite(sys.argv[1])
else:
    app.suite = TodoSuite()

# this adds cross-origin capabilities, sets max content length, and others.
init(app)

# Register all the applications.
auth = Auth(app.suite)
core = TodoApp(app.suite)

# Create all databases and tables.
app.suite.validate()
app.suite.ensure_database_objects()

# Attach the API to the /api/ endpoint.
app.register_blueprint(api_tree, url_prefix=&#39;/api&#39;)

if __name__ == &#39;__main__&#39;:
    app.run()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Working with Applications</title>
      <link>https://jeffersonheard.github.io/sondra/topical-guides/applications/</link>
      <pubDate>Wed, 12 Oct 2016 16:38:34 -0400</pubDate>
      
      <guid>https://jeffersonheard.github.io/sondra/topical-guides/applications/</guid>
      <description>

&lt;p&gt;Applications are the highest level grouping for apis. A Sondra application subclass corresponds to a
single database in the RethinkDB backend. Like collections and documents, you can attach methods to
the application class and expose them as API endpoints.&lt;/p&gt;

&lt;h2 id=&#34;using-applications-to-structure-your-api&#34;&gt;Using Applications to Structure your API&lt;/h2&gt;

&lt;h3 id=&#34;sample-definition-of-your-api&#34;&gt;Sample definition of your API&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
from sondra.collection import Collection
from sondra.document import Document
from sondra.application import Application
from sondra.suite import Suite
from sondra.schema import S

class Items(Collection):
    document_class = Item  # this is the class that as instances per-record
    indexes = [&amp;quot;title&amp;quot;, &amp;quot;complete&amp;quot;]  # the fields to build indexes on.
    order_by = [&amp;quot;created&amp;quot;]  # Sondra treats &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot; as a RethinkDB Date.

class TodoApp(Application):
    collections = (Items,)  # For now we&#39;ll just define the collections

class TodoSuite(Suite):
    cross_origin = True  # append CORS headers
    debug = True  # extra logging
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;application-object-lifecycle&#34;&gt;Application Object Lifecycle&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;One creates an application object and assigns it to a particular suite in the constructor.&lt;/li&gt;
&lt;li&gt;The application ensures that its database exists.&lt;/li&gt;
&lt;li&gt;The application creates all its collections and registers them with itself.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;signals&#34;&gt;Signals&lt;/h3&gt;

&lt;p&gt;Unless otherwise noted, all signals are sent with the application instance as their first and only
argument.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pre_init&lt;/code&gt; - Sent after the Application registers with the suite, but before it initializes any collections.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post_init&lt;/code&gt; - Sent after the Application object initializes its collections.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre_registration&lt;/code&gt; - Sent before the Application registers with the suite.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post_registration&lt;/code&gt; - Sent after the Application registers with the suite.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre_create_database&lt;/code&gt; - Sent before the Application&amp;rsquo;s database is created / ensured to exist.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post_create_database&lt;/code&gt; - Sent after the Application&amp;rsquo;s database is guaranteed to exist, but before tables and indexes are checked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre_create_tables&lt;/code&gt; - Sent after the Application&amp;rsquo;s database is guaranteed to exist, but before the tables and indexes are checked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post_create_tables&lt;/code&gt; - Sent as soon as all tables are created.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre_delete_database&lt;/code&gt; - Sent before databases and all tables will be deleted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post_delete_database&lt;/code&gt; - Sent after the database has been deleted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre_delete_tables&lt;/code&gt; - Sent before tables will be deleted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post_delete_tables&lt;/code&gt; - Sent after tables have been deleted.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Topical Guides</title>
      <link>https://jeffersonheard.github.io/sondra/topical-guides/</link>
      <pubDate>Wed, 12 Oct 2016 16:38:08 -0400</pubDate>
      
      <guid>https://jeffersonheard.github.io/sondra/topical-guides/</guid>
      <description>

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jeffersonheard.github.io/sondra/topical-guides/flask&#34;&gt;Exposing your API with Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jeffersonheard.github.io/sondra/topical-guides/querying&#34;&gt;Querying over the web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jeffersonheard.github.io/sondra/topical-guides/documents&#34;&gt;Working with Documents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jeffersonheard.github.io/sondra/topical-guides/collections&#34;&gt;Working with Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jeffersonheard.github.io/sondra/topical-guides/applications&#34;&gt;Working with Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jeffersonheard.github.io/sondra/topical-guides/suites&#34;&gt;Working with Suites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jeffersonheard.github.io/sondra/topical-guides/querysets&#34;&gt;QuerySets in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>https://jeffersonheard.github.io/sondra/topical-guides/collections/</link>
      <pubDate>Wed, 12 Oct 2016 16:38:34 -0400</pubDate>
      
      <guid>https://jeffersonheard.github.io/sondra/topical-guides/collections/</guid>
      <description>&lt;p&gt;Coming Soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Documents</title>
      <link>https://jeffersonheard.github.io/sondra/topical-guides/documents/</link>
      <pubDate>Wed, 12 Oct 2016 16:38:34 -0400</pubDate>
      
      <guid>https://jeffersonheard.github.io/sondra/topical-guides/documents/</guid>
      <description>&lt;p&gt;Coming Soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exposing Methods</title>
      <link>https://jeffersonheard.github.io/sondra/topical-guides/methods/</link>
      <pubDate>Wed, 12 Oct 2016 16:38:34 -0400</pubDate>
      
      <guid>https://jeffersonheard.github.io/sondra/topical-guides/methods/</guid>
      <description>&lt;p&gt;Coming Soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Queries over HTTP/S</title>
      <link>https://jeffersonheard.github.io/sondra/topical-guides/querying/</link>
      <pubDate>Wed, 12 Oct 2016 16:38:34 -0400</pubDate>
      
      <guid>https://jeffersonheard.github.io/sondra/topical-guides/querying/</guid>
      <description>&lt;p&gt;Coming Soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>QuerySets in Python</title>
      <link>https://jeffersonheard.github.io/sondra/topical-guides/querysets/</link>
      <pubDate>Wed, 12 Oct 2016 16:38:34 -0400</pubDate>
      
      <guid>https://jeffersonheard.github.io/sondra/topical-guides/querysets/</guid>
      <description>&lt;p&gt;Coming Soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Suites</title>
      <link>https://jeffersonheard.github.io/sondra/topical-guides/suites/</link>
      <pubDate>Wed, 12 Oct 2016 16:38:34 -0400</pubDate>
      
      <guid>https://jeffersonheard.github.io/sondra/topical-guides/suites/</guid>
      <description>&lt;p&gt;Coming Soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>